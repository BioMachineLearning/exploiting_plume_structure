# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 13:25:19 2014

@author: viktor

plum.base - Template for plumy's SensorColumn & SensorBoard & Sensor class

Holds attributes and methods used in every one of the aformentioned classes. 
"""

import os
import pandas as pd
import numpy as np
import scipy.signal as sp


class base(object):
    def __init__(self, filename, date, gas, loc, voltage, speed, _args):
        assert isinstance(filename, str)
        assert isinstance(date, str)
        assert isinstance(gas, str)
        assert isinstance(loc, str)
        assert isinstance(voltage, str)
        assert isinstance(speed, str)
        assert isinstance(_args, dict)

        self.FileName = os.path.basename(filename)
        self.FilePath = os.path.dirname(filename)
        self.TimeStamp = date
        self.Gas = gas
        self.Location = loc
        self.SensorVoltage = voltage
        self.FanSpeed = speed
        self._args = _args

        self._Time = None
        self._Data = None
        self._Filter = None

        self.Type = self.__class__.__name__

        if self._args['verbose']:
            print self

    def __str__(self):
        return '> %s:\n\n\t+ FileName: %s\n\t+ TimeStamp: %s\n\t' \
            '+ Gas: %s\n\t+ Location: %s\n\t+ SensorVoltage: %s\n\t' \
            '+ FanSpeed: %s\n\t+ Verbose: %s' % \
            (self.Type, self.FileName, self.TimeStamp, self.Gas, self.Location,
             self.SensorVoltage, self.FanSpeed, self._args['verbose'])

    def __call__(self):
        if hasattr(self, '_Data'):
            return self._Data
        else:
            print '\nNo data for', self

    def get_name(self):
        """
        Istance name getter.
        """
        if hasattr(self, 'Name'):
            return self.Name

    def set_name(self, name):
        """
        Instance name setter.
        """
        assert isinstance(name, str)
        self.Name = name

    property(fget=get_name, fset=set_name, doc='Object name descriptors.')

    @property
    def sample_rate(self):
        if hasattr(self, '_Time'):
            return (self._Time.size/float(self._Time[-1]))*1000  # in Hz

    def get_time(self):
        if hasattr(self, '_Data'):
            return self._Data.index.get_values()

    def set_time(self, time):
        assert isinstance(time, (list, np.ndarray))
        self._Time = time

    property(fget=get_time, fset=set_time, doc='Base class time descriptors.')

    def get_filter(self):
        if hasattr(self, '_Filter'):
            return self._Filter

    def set_filter(self, order=2, cutoff=None, _btype='low'):
        """
        Change the parameters of the Butterworth filter.
        """
        assert isinstance(order, int)
        assert isinstance(cutoff, float) or not cutoff
        assert _btype in ['low', 'high', 'band']
        if not cutoff:
            cutoff = 1/(self.sample_rate / 2)
        self._Filter = sp.butter(order, cutoff, btype=_btype)

    property(fget=get_filter, fset=set_filter,
             doc='Base class filter paramter descriptor.')

    # TODO: Remove load from base and put into SensorColumn
    def load(self):
        """
        Use pandas to load column-data from file.
        """
        path = os.path.join(self.FilePath, self.FileName)
        assert os.path.exists(path), 'File not found.'

        exclude = [11,20,29,38,47,56,65,74,83]
        user_cols = range(92)
        for x in exclude:
            user_cols.remove(x)

        col_names = ['Time','FanSetPoint','FanReading','Mfc1_SetPoint',
                     'Mfc2_SetPoint','Mfc3_SetPoint','Mfc1_Read','Mfc2_Read',
                     'Mfc3_Read','Temp','RelHumid',
                     'B1S1','B1S2','B1S3','B1S4','B1S5','B1S6','B1S7','B1S8',
                     'B2S1','B2S2','B2S3','B2S4','B2S5','B2S6','B2S7','B2S8',
                     'B3S1','B3S2','B3S3','B3S4','B3S5','B3S6','B3S7','B3S8',
                     'B4S1','B4S2','B4S3','B4S4','B4S5','B4S6','B4S7','B4S8',
                     'B5S1','B5S2','B5S3','B5S4','B5S5','B5S6','B5S7','B5S8',
                     'B6S1','B6S2','B6S3','B6S4','B6S5','B6S6','B6S7','B6S8',
                     'B7S1','B7S2','B7S3','B7S4','B7S5','B7S6','B7S7','B7S8',
                     'B8S1','B8S2','B8S3','B8S4','B8S5','B8S6','B8S7','B8S8',
                     'B9S1','B9S2','B9S3','B9S4','B9S5','B9S6','B9S7','B9S8']

        try:
            self._Data = pd.read_table(path, names = col_names, header = 0,
                                  index_col = 'Time', usecols = user_cols)
            size = self._Data.values.nbytes + \
                    self._Data.index.nbytes + \
                    self._Data.columns.nbytes
            size = float(size)/10000

            if self._args['verbose']:
                print '\nUsed %i MB for SensorColumn.' % size

        except IOError:
            print 'Error loading Data.'
